#!/bin/bash

# Claude Code Framework Customization Script
# This interactive script helps teams customize the best practices to their needs

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
CLAUDE_DIR=".claude"
BEST_PRACTICES_DIR="$CLAUDE_DIR/best_practices"
CONFIG_DIR="$CLAUDE_DIR/config"
CUSTOMIZATION_LOG="$CLAUDE_DIR/customization-log.md"
TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

# Ensure we're in the right directory
if [ ! -d "$CLAUDE_DIR" ]; then
    echo -e "${RED}Error: Not in a Claude Code project directory${NC}"
    echo "Please run this script from the root of your project"
    exit 1
fi

# Create config directory if it doesn't exist
mkdir -p "$CONFIG_DIR"

echo -e "${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║        Claude Code Framework Customization Tool        ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"
echo

# Function to prompt for yes/no
prompt_yes_no() {
    local prompt="$1"
    local response
    
    while true; do
        read -p "$prompt (y/n): " response
        case $response in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes (y) or no (n).";;
        esac
    done
}

# Function to prompt for choice
prompt_choice() {
    local prompt="$1"
    shift
    local options=("$@")
    local choice
    
    echo "$prompt"
    for i in "${!options[@]}"; do
        echo "  $((i+1)). ${options[$i]}"
    done
    
    while true; do
        read -p "Enter your choice (1-${#options[@]}): " choice
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
            echo "${options[$((choice-1))]}"
            return 0
        else
            echo "Invalid choice. Please enter a number between 1 and ${#options[@]}."
        fi
    done
}

# Function to backup a file
backup_file() {
    local file="$1"
    if [ -f "$file" ] && [ ! -f "${file}.default" ]; then
        cp "$file" "${file}.default"
        echo -e "${GREEN}✓ Backed up $file${NC}"
    fi
}

# Function to add customization marker
add_custom_marker() {
    local file="$1"
    local section="$2"
    local team="$3"
    local reason="$4"
    
    cat >> "$file" << EOF

## $section [CUSTOMIZED: $team]
<!-- Custom requirement: Added by customization script on $TIMESTAMP -->
<!-- Reason: $reason -->
EOF
}

# Function to log customization
log_customization() {
    local file="$1"
    local change="$2"
    local team="$3"
    
    if [ ! -f "$CUSTOMIZATION_LOG" ]; then
        cat > "$CUSTOMIZATION_LOG" << EOF
# Best Practices Customization Log

This log tracks all customizations made to the Claude Code best practices.

---

EOF
    fi
    
    cat >> "$CUSTOMIZATION_LOG" << EOF
## $TIMESTAMP - $file
- Modified by: $team (via customization script)
- Changes: $change
- Script version: 1.0

EOF
}

# Gather team information
echo -e "${YELLOW}Let's start by gathering some information about your team:${NC}"
echo

read -p "Enter your team/project name: " TEAM_NAME
while [ -z "$TEAM_NAME" ]; do
    echo -e "${RED}Team name cannot be empty${NC}"
    read -p "Enter your team/project name: " TEAM_NAME
done

TEAM_SIZE=$(prompt_choice "What is your team size?" "Solo developer" "Small team (2-5)" "Medium team (6-15)" "Large team (16+)")

PROJECT_TYPE=$(prompt_choice "What type of project are you working on?" "Web application" "API/Microservices" "Mobile app" "Desktop application" "Library/Package" "Full-stack application")

INDUSTRY=$(prompt_choice "What industry/domain?" "General/Other" "Finance/FinTech" "Healthcare" "E-commerce" "Education" "Gaming" "Enterprise")

# Create team configuration
echo -e "\n${YELLOW}Creating team configuration...${NC}"

cat > "$CONFIG_DIR/team-config.yaml" << EOF
# Team Configuration
# Generated by customization script on $TIMESTAMP

team:
  name: "$TEAM_NAME"
  size: "$TEAM_SIZE"
  
project:
  type: "$PROJECT_TYPE"
  industry: "$INDUSTRY"
  
customizations:
  created: "$TIMESTAMP"
  script_version: "1.0"
EOF

echo -e "${GREEN}✓ Team configuration created${NC}"

# Technology stack customization
echo -e "\n${YELLOW}Which technologies does your team primarily use?${NC}"

TECHNOLOGIES=()
for tech in "Node.js" "Python" "PHP" "Java" "Angular" "React" "Vue" "Docker" "Kubernetes"; do
    if prompt_yes_no "Do you use $tech?"; then
        TECHNOLOGIES+=("$tech")
    fi
done

# Save technology preferences
cat >> "$CONFIG_DIR/team-config.yaml" << EOF

technologies:
EOF

for tech in "${TECHNOLOGIES[@]}"; do
    echo "  - $tech" >> "$CONFIG_DIR/team-config.yaml"
done

# Coding standards customization
echo -e "\n${YELLOW}Let's customize your coding standards:${NC}"

# Indentation
INDENT_STYLE=$(prompt_choice "Preferred indentation style?" "2 spaces" "4 spaces" "Tabs")

# Line length
read -p "Maximum line length (default 80, enter for default): " MAX_LINE_LENGTH
MAX_LINE_LENGTH=${MAX_LINE_LENGTH:-80}

# Naming conventions
NAMING_CONVENTION=$(prompt_choice "Variable naming convention?" "camelCase" "snake_case" "PascalCase" "kebab-case")

# Update Node.js best practices if using Node.js
if [[ " ${TECHNOLOGIES[@]} " =~ " Node.js " ]]; then
    echo -e "\n${YELLOW}Customizing Node.js best practices...${NC}"
    
    NODE_FILE="$BEST_PRACTICES_DIR/nodejs-best-practices.md"
    if [ -f "$NODE_FILE" ]; then
        backup_file "$NODE_FILE"
        
        # Add customizations
        add_custom_marker "$NODE_FILE" "Code Style" "$TEAM_NAME" "Team preferences from customization script"
        
        cat >> "$NODE_FILE" << EOF
- Indentation: $INDENT_STYLE
- Maximum line length: $MAX_LINE_LENGTH characters
- Variable naming: $NAMING_CONVENTION
EOF
        
        log_customization "nodejs-best-practices.md" "Code style: $INDENT_STYLE, max line $MAX_LINE_LENGTH, naming $NAMING_CONVENTION" "$TEAM_NAME"
        
        echo -e "${GREEN}✓ Node.js best practices customized${NC}"
    fi
fi

# Security customizations
echo -e "\n${YELLOW}Security requirements:${NC}"

if [[ "$INDUSTRY" == "Finance/FinTech" ]] || [[ "$INDUSTRY" == "Healthcare" ]]; then
    echo -e "${BLUE}Detected regulated industry. Adding compliance requirements...${NC}"
    
    SECURITY_FILE="$BEST_PRACTICES_DIR/security-best-practices.md"
    if [ -f "$SECURITY_FILE" ]; then
        backup_file "$SECURITY_FILE"
        
        if [[ "$INDUSTRY" == "Healthcare" ]]; then
            add_custom_marker "$SECURITY_FILE" "HIPAA Compliance" "$TEAM_NAME" "Healthcare industry requirements"
            cat >> "$SECURITY_FILE" << EOF
- All PHI must be encrypted at rest (AES-256)
- Implement audit logging for all data access
- Session timeout: 15 minutes of inactivity
- Multi-factor authentication required
- Regular security training for all developers
EOF
            log_customization "security-best-practices.md" "Added HIPAA compliance requirements" "$TEAM_NAME"
        fi
        
        if [[ "$INDUSTRY" == "Finance/FinTech" ]]; then
            add_custom_marker "$SECURITY_FILE" "Financial Compliance" "$TEAM_NAME" "Financial industry requirements"
            cat >> "$SECURITY_FILE" << EOF
- PCI DSS compliance for payment data
- Encryption of all financial data
- Tokenization for sensitive card data
- Regular penetration testing
- Incident response plan required
EOF
            log_customization "security-best-practices.md" "Added financial compliance requirements" "$TEAM_NAME"
        fi
        
        echo -e "${GREEN}✓ Security best practices customized${NC}"
    fi
fi

# Testing preferences
echo -e "\n${YELLOW}Testing preferences:${NC}"

TEST_FRAMEWORK=$(prompt_choice "Preferred testing approach?" "TDD (Test-Driven Development)" "BDD (Behavior-Driven Development)" "Traditional (tests after code)" "Minimal testing")

read -p "Minimum code coverage requirement (%, enter for 80): " CODE_COVERAGE
CODE_COVERAGE=${CODE_COVERAGE:-80}

# Update test configuration
cat >> "$CONFIG_DIR/team-config.yaml" << EOF

testing:
  approach: "$TEST_FRAMEWORK"
  minimum_coverage: $CODE_COVERAGE
  
code_style:
  indentation: "$INDENT_STYLE"
  max_line_length: $MAX_LINE_LENGTH
  naming_convention: "$NAMING_CONVENTION"
EOF

# Workflow customizations
echo -e "\n${YELLOW}Workflow preferences:${NC}"

if prompt_yes_no "Do you use Git Flow branching?"; then
    BRANCHING="gitflow"
else
    BRANCHING=$(prompt_choice "Branch naming convention?" "feature/TASK-ID" "TASK-ID" "feature/description" "custom")
fi

PR_REVIEWS=$(prompt_choice "Pull request review requirements?" "No reviews needed" "1 reviewer" "2 reviewers" "Team lead approval")

# Create workflow configuration
cat > "$CONFIG_DIR/workflow-config.yaml" << EOF
# Workflow Configuration
# Generated by customization script on $TIMESTAMP

branching:
  strategy: "$BRANCHING"
  
pull_requests:
  reviews_required: "$PR_REVIEWS"
  
deployment:
  environments: ["development", "staging", "production"]
EOF

# Summary report
echo -e "\n${BLUE}╔════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║                 Customization Summary                  ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════╝${NC}"
echo
echo -e "${GREEN}✓ Team configuration created${NC}"
echo -e "${GREEN}✓ Technology stack configured${NC}"
echo -e "${GREEN}✓ Coding standards customized${NC}"
if [[ "$INDUSTRY" == "Finance/FinTech" ]] || [[ "$INDUSTRY" == "Healthcare" ]]; then
    echo -e "${GREEN}✓ Industry-specific security requirements added${NC}"
fi
echo -e "${GREEN}✓ Testing preferences set${NC}"
echo -e "${GREEN}✓ Workflow configuration created${NC}"
echo
echo -e "Configuration files created in: ${BLUE}$CONFIG_DIR/${NC}"
echo -e "Customization log: ${BLUE}$CUSTOMIZATION_LOG${NC}"
echo -e "Original files backed up with ${BLUE}.default${NC} extension"
echo
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Review the customizations in the modified files"
echo "2. Commit these changes to your repository"
echo "3. Share with your team for feedback"
echo "4. See ${BLUE}$CLAUDE_DIR/guides/customization-guide.md${NC} for more details"
echo
echo -e "${GREEN}Customization complete!${NC}"

# Create a summary file
cat > "$CONFIG_DIR/customization-summary.md" << EOF
# Customization Summary for $TEAM_NAME

Generated on: $TIMESTAMP

## Team Profile
- **Team Size**: $TEAM_SIZE
- **Project Type**: $PROJECT_TYPE
- **Industry**: $INDUSTRY

## Technologies
$(printf '%s\n' "${TECHNOLOGIES[@]}" | sed 's/^/- /')

## Coding Standards
- **Indentation**: $INDENT_STYLE
- **Max Line Length**: $MAX_LINE_LENGTH
- **Naming Convention**: $NAMING_CONVENTION

## Testing
- **Approach**: $TEST_FRAMEWORK
- **Minimum Coverage**: $CODE_COVERAGE%

## Workflow
- **Branching Strategy**: $BRANCHING
- **PR Reviews**: $PR_REVIEWS

## Files Modified
- See $CUSTOMIZATION_LOG for details

## Next Steps
1. Review all customizations
2. Test with your team
3. Iterate as needed
EOF

echo -e "\nSummary saved to: ${BLUE}$CONFIG_DIR/customization-summary.md${NC}"